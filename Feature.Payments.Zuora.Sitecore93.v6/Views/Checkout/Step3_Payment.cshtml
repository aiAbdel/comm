@model Your.Feature.Payments.Models.Step3_PaymentModel
<h3>Payment</h3>

<div>
  <h4>Use an existing payment method</h4>
  <form id="existingpm">
    <div id="pm-list">
      @{
        var list = (object)Model.ExistingPaymentMethods;
      }
      @if (list == null) {
        <div>No saved payment methods.</div>
      } else {
        <script>window.existingPaymentMethods = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ExistingPaymentMethods));</script>
        <div id="pm-container"></div>
      }
    </div>
    <button type="button" id="btn-use-existing">Pay & Subscribe with selected</button>
  </form>
</div>

<hr />
<div>
  <h4>Or enter a new method</h4>
  <div id="zuora-form"></div>
  <button type="button" id="btn-new-pay" disabled>Pay & Subscribe</button>
</div>

<script src="https://static.zuora.com/checkout/checkout.js"></script>
<script>
(function(){
  var accountNumber = "@Model.AccountNumber";
  var accountId = "@Model.AccountId";
  var publishableKey = "@Model.PublishableKey";
  var environment = "@Model.Environment";
  var ratePlanId = "@Model.RatePlanId";
  var chargeId = "@Model.ChargeId";
  var qty = @Model.Quantity;
  var gatewayInstance = "@Model.GatewayInstanceName";

  function renderExisting() {
    var container = document.getElementById('pm-container');
    if (!window.existingPaymentMethods) { container.innerHTML = "No saved payment methods."; return; }
    var items = window.existingPaymentMethods.data || window.existingPaymentMethods;
    if (!items || !items.length) { container.innerHTML = "No saved payment methods."; return; }
    container.innerHTML = items.map(function(pm, idx){
      var label = (pm.type || pm.paymentMethodType || 'PM') + ' â€¢ ' + (pm.maskNumber || pm.maskedNumber || pm.last4 || '****');
      return '<label><input type="radio" name="pmId" value="'+(pm.id||pm.paymentMethodId)+'" '+(idx===0?'checked':'')+'/> '+label+'</label>';
    }).join('<br/>');
  }
  renderExisting();

  async function getAmountFromPreview(){
    var resp = await fetch('@Url.Action("PreviewTotal","Orders", new { area = "" })', {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ accountNumber: accountNumber, productRatePlanId: ratePlanId, productRatePlanChargeId: chargeId, quantity: qty })
    });
    if(!resp.ok){ throw new Error('Unable to compute amount'); }
    var data = await resp.json();
    return data && data.amount || 0;
  }

  async function createPaymentSession(amount){
    var resp = await fetch('@Url.Action("CreateSession","Payments",new { area = "" })', {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ accountId: accountId, amount: amount, processPayment: true, storePaymentMethod: true, paymentGateway: gatewayInstance })
    });
    if(!resp.ok){ throw new Error('Could not start payment'); }
    return resp.json();
  }

  async function mountPaymentForm(){
    var amount = await getAmountFromPreview();
    var sess = await createPaymentSession(amount);
    var token = sess && (sess.token || sess.session || sess.id);
    if(!token) throw new Error('Invalid session token');

    var z = Zuora.init({ publishableKey: publishableKey, environment: environment });
    var form = z.createPaymentForm({ token: token });
    form.mount('#zuora-form');
    form.on('ready', function(){ document.getElementById('btn-new-pay').disabled = false; });
    form.on('error', function(e){ alert(e && e.message || 'Payment error'); });

    document.getElementById('btn-new-pay').addEventListener('click', async function(){
      try {
        var res = await form.submit();
        if(!res || !res.success){ alert((res && res.error && res.error.message) || 'Payment failed'); return; }
        var paymentId = res.paymentId;
        var paymentMethodId = res.paymentMethodId;

        await fetch('@Url.Action("SetDefaultPayment","Payments",new { area = "" })', {
          method:'POST', headers:{'Content-Type':'application/json'},
          body: JSON.stringify({ accountKey: accountNumber, paymentMethodId: paymentMethodId, autoPay: true })
        });

        var orderResp = await fetch('@Url.Action("Place","Orders",new { area = "" })', {
          method:'POST', headers:{'Content-Type':'application/json'},
          body: JSON.stringify({ accountNumber: accountNumber, productRatePlanId: ratePlanId, productRatePlanChargeId: chargeId, quantity: qty, collect: false })
        });
        if(!orderResp.ok){ alert('Order failed'); return; }
        var order = await orderResp.json();
        var invoice = (order && order.invoices && order.invoices[0]) || null;
        var invoiceId = invoice && (invoice.id || invoice.invoiceId);
        if (invoiceId) {
          await fetch('@Url.Action("Apply","Payments",new { area = "" })', {
            method:'POST', headers:{'Content-Type':'application/json'},
            body: JSON.stringify({ paymentId: paymentId, invoiceId: invoiceId, amount: amount })
          });
        }
        window.location = '/success';
      } catch(err){ alert(err && err.message || 'Unexpected error'); }
    });
  }
  mountPaymentForm().catch(function(e){ console.error(e); });

  document.getElementById('btn-use-existing').addEventListener('click', async function(){
    var sel = document.querySelector('input[name="pmId"]:checked');
    if (!sel) { alert('Select a payment method'); return; }
    try {
      await fetch('@Url.Action("SetDefaultPayment","Payments",new { area = "" })', {
        method:'POST', headers:{'Content-Type':'application/json'},
        body: JSON.stringify({ accountKey: accountNumber, paymentMethodId: sel.value, autoPay: true })
      });
      var orderResp = await fetch('@Url.Action("Place","Orders",new { area = "" })', {
        method:'POST', headers:{'Content-Type':'application/json'},
        body: JSON.stringify({ accountNumber: accountNumber, productRatePlanId: ratePlanId, productRatePlanChargeId: chargeId, quantity: qty, collect: true })
      });
      if(!orderResp.ok){ var t = await orderResp.text(); alert('Order failed: ' + t); return; }
      window.location = '/success';
    } catch(e){ alert(e && e.message || 'Unexpected error'); }
  });
})();
</script>
