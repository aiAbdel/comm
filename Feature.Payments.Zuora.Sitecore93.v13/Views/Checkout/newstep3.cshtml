@model Your.Feature.Payments.Models.Step3_PaymentModel
@{ /* Expected: AccountNumber, AccountId, PublishableKey, Environment, RatePlanId, ChargeId, Quantity, Currency, Amount (Total due today) */ }
@{ Layout = null; }

<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Payment</title>
  <style>
    body{font-family:Inter,system-ui,Arial,sans-serif;background:#0b1020;color:#e7ecff;margin:0;padding:40px}
    .panel{max-width:720px;margin:0 auto;background:linear-gradient(180deg,#121933,#0f1830);border:1px solid rgba(255,255,255,.08);border-radius:16px;padding:20px}
    .cta{display:inline-block;margin-top:12px;background:linear-gradient(180deg,#6c8cff,#5b77d8);color:white;text-decoration:none;padding:10px 14px;border-radius:10px;border:0;cursor:pointer}
    #receipt{margin-top:12px}
  </style>
</head>
<body>
  <div class="panel">
    <h3>Payment</h3>
    <div id="zuora-payment-form"></div>
    <div id="receipt"></div>
  </div>

  <!-- Payment Form v3 -->
  <script src="https://js.zuora.com/payment/v3/zuora.js"></script>
  <script>
  (function(){
    const accountNumber = "@Model.AccountNumber";
    const accountId     = "@Model.AccountId";
    const publishableKey= "@Model.PublishableKey";
    const environment   = "@Model.Environment";  // 'sandbox' | 'production'
    const ratePlanId    = "@Model.RatePlanId";
    const chargeId      = "@Model.ChargeId";
    const qty           = @Model.Quantity;
    const currency      = "@Model.Currency";     // from Step 2 preview
    const amount        = @Model.Amount;         // total due today (number)

    // init hosted-style form
    const zuora = Zuora(publishableKey, { environment });

    // helper: create session (server will call POST /web-payments/sessions)
    async function createPaymentSession() {
      const resp = await fetch('/Payments/CreateSession', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify({
          accountId: accountId,
          currency:  currency,
          amount:    amount,              // > 0 if gateway verifies
          processPayment: false,
          storePaymentMethod: true
        })
      });
      if (!resp.ok) throw new Error('Could not start payment session');
      return resp.json(); // should return the session token as string
    }

    // helper: finalize after the PM is saved (server patches PM address, sets default, creates order with collect:true)
    async function finalizeCheckout(paymentMethodId) {
      const resp = await fetch('/Payments/Finalize', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify({
          accountNumber,
          paymentMethodId,
          productRatePlanId: ratePlanId,
          productRatePlanChargeId: chargeId,
          quantity: qty
        })
      });
      if (!resp.ok) {
        const t = await resp.text();
        throw new Error(t || 'Finalize failed');
      }
      return resp.json(); // expect { success, orderNumber, subscriptionNumber, invoiceNumber, paymentId }
    }

    const configuration = {
      locale: "en",
      region: "US",
      currency: currency,
      amount: amount.toFixed ? amount.toFixed(2) : amount, // ensure string/2dp if needed

      // Called by the SDK when the user clicks Pay
      createPaymentSession: () => new Promise((resolve, reject) => {
        createPaymentSession()
          .then((token) => resolve(token))
          .catch((e) => reject(e));
      }),

      // Called when Zuora saves the PM (no capture since processPayment:false)
      onComplete: async (result) => {
        try {
          if (!result || !result.success) {
            alert(result && result.error && result.error.message || 'Saving payment method failed');
            return;
          }
          // result.paymentMethodId is available here
          const done = await finalizeCheckout(result.paymentMethodId);

          if (done && done.success) {
            const r = document.getElementById('receipt');
            r.innerHTML = `
              <div>
                <div><strong>Order:</strong> ${done.orderNumber || ''}</div>
                <div><strong>Subscription:</strong> ${done.subscriptionNumber || ''}</div>
                <div><strong>Invoice:</strong> ${done.invoiceNumber || ''}</div>
                <div><strong>PaymentId:</strong> ${done.paymentId || ''}</div>
              </div>`;
            // Optionally redirect to success:
            // window.location = '@Url.Action("Success","Checkout")' + '?order=' + encodeURIComponent(done.orderNumber || '');
          } else {
            throw new Error('Finalize did not return success');
          }
        } catch (err) {
          console.error(err);
          alert(err.message || 'Unexpected error after payment method saved');
        }
      }
    };

    // Create & mount the form
    zuora.createPaymentForm(configuration)
      .then((form) => form.mount("#zuora-payment-form"))
      .catch((e) => { console.error(e); alert('Failed to initialize payment form'); });
  })();
  </script>
</body>
</html>
